import math
import time
from random import randint
from tqdm import tqdm


def get_coords_from_console():
    n = int(input())
    coords = dict()
    for i in range(n):
        s = input().split(' ')
        coords[int(s[0])] = [int(float(s[1])), int(float(s[2]))]
    return coords


def get_coords_from_file(filename):
    with open(filename, "r") as f:
        st = f.read().split("\n")[1:]
        return {int(s.split()[0]): list(map(int, s.split()[1:])) for s in st}


coords = get_coords_from_file("mona_1000 (2).txt")
old_i_dist, old_k_dist = 0, 0
print(coords)

two_opt_swap = lambda r, i, k: r[0:i] + r[k:-len(r) + i - 1:-1] + r[k + 1:len(r)]


# def calculate_total_distance(route):
#     res = 0
#     for p in range(1, len(route)):
#         res += math.hypot(coords[route[p]][0] - coords[route[p-1]][0], coords[route[p]][1] - coords[route[p-1]][1])
#     return res
def get_dist(x, r):
    return math.hypot(coords[r[x-1]][0] - coords[r[x]][0], coords[r[x-1]][1] - coords[r[x]][1])


def get_i_k_dists(i, k, route):
    try:
        new_k_dist = get_dist(k + 1, route)
    except:
        new_k_dist = 0
    try:
        new_i_dist = get_dist(i, route)
    except:
        new_i_dist = 0
    return new_i_dist, new_k_dist


def calculate_total_distance(route, i=None, k=None, old_dist=None):
    if i and k and old_dist:
        return old_dist - old_i_dist - old_k_dist + sum(get_i_k_dists(i, k, route))
    else:
        res = 0
        for p in range(1, len(route)):
            res += get_dist(p, route)
    return res


def two_opt(route):
    global old_i_dist, old_k_dist
    existing_route = route
    current_dist = calculate_total_distance(route)
    changed = True
    while changed:
        changed = False
        for i in range(len(existing_route)):
            for k in range(i + 1, len(existing_route)):
                old_i_dist, old_k_dist = get_i_k_dists(i, k, existing_route)

                new_route = two_opt_swap(existing_route, i, k)
                new_dist = calculate_total_distance(new_route, i, k, current_dist)

                if new_dist < current_dist:
                    existing_route = new_route
                    current_dist = new_dist
                    changed = True
    return existing_route, current_dist


def four_opt(route):
    rand_kek = lambda: randint(0, len(route) - 1) // 4
    x = rand_kek()
    y = x + rand_kek()
    z = y + rand_kek()
    return route[:x] + route[z:] + route[y:z] + route[x:y]


def greedy(node=1):
    route_best = []
    len_best = float('inf')
    # for iter_index, iter in tqdm(coords.items()):
    route = [node]
    new_city_index, new_city_coords, distance = make_closer(coords[node], route)
    len_route = distance
    route.append(new_city_index)
    while len(route) < len(coords):
        new_city_index, new_city_coords, distance = make_closer(new_city_coords, route)
        len_route += distance
        route.append(new_city_index)
    if len_route < len_best:
        len_best = len_route
        route_best = route
    return route_best, len_best


def make_closer(coords_city, past_cities):
    dist_best = float('inf')
    for id, cs in coords.items():
        if id not in past_cities:
            distance = math.hypot(coords_city[0] - cs[0], coords_city[1] - cs[1])
            if distance < dist_best:
                dist_best = distance
                closer_city_id = id
                closer_city_coords = cs
    return closer_city_id, closer_city_coords, dist_best


def local_search(start_route):
    return two_opt(start_route)


def integrated_local_search(node):
    route, _ = greedy(node)
    print(_)
    route, min_distance = local_search(route)
    print("Distance after 2-Opt Approach:", min_distance)
    print(route, len(route))
    for i in tqdm(range(2)):
        new_route = four_opt(route)
        new_route, new_distance = local_search(new_route)
        if new_distance < min_distance:
            min_distance = new_distance
            route = new_route
    print("Distance after 4-Opt Approach:", min_distance)
    # print(route, len(route))
    return route

x = integrated_local_search(1)

# s_t = time.time()
# integrated_local_search()
# print(time.time() - s_t)

# 10125551.37
# x = [650, 98, 643, 535, 667, 621, 348, 203, 805, 679, 541, 58, 67, 675, 600, 729, 298, 388, 351, 71, 915, 379, 230, 801, 154, 833, 558, 437, 410, 139, 1000, 668, 602, 340, 991, 486, 601, 169, 511, 864, 87, 99, 629, 929, 239, 416, 678, 44, 350, 765, 372, 128, 396, 62, 888, 196, 331, 308, 819, 639, 390, 529, 446, 277, 952, 923, 894, 132, 342, 352, 790, 504, 400, 846, 971, 865, 551, 371, 147, 220, 344, 199, 781, 7, 516, 109, 219, 330, 669, 542, 157, 532, 962, 533, 118, 145, 969, 740, 612, 622, 509, 872, 364, 53, 248, 224, 488, 297, 890, 948, 828, 148, 931, 334, 326, 399, 761, 732, 512, 213, 919, 796, 886, 306, 526, 18, 881, 65, 687, 697, 869, 265, 571, 317, 967, 183, 826, 956, 307, 123, 674, 742, 73, 800, 804, 980, 517, 86, 284, 699, 163, 963, 607, 859, 321, 425, 573, 137, 33, 8, 180, 429, 433, 927, 35, 78, 287, 920, 260, 194, 620, 315, 572, 389, 959, 940, 736, 422, 461, 531, 777, 431, 519, 703, 394, 574, 898, 604, 76, 273, 550, 817, 449, 708, 802, 715, 113, 759, 839, 937, 897, 327, 835, 700, 320, 653, 851, 29, 662, 717, 367, 395, 418, 75, 787, 722, 222, 648, 594, 912, 338, 38, 185, 114, 603, 773, 409, 896, 671, 126, 345, 328, 232, 546, 376, 442, 25, 393, 724, 229, 93, 617, 484, 19, 672, 598, 506, 911, 691, 939, 670, 375, 102, 712, 665, 992, 304, 935, 904, 982, 853, 501, 599, 130, 704, 615, 281, 789, 368, 938, 450, 357, 847, 21, 408, 61, 465, 549, 285, 421, 142, 933, 514, 564, 628, 468, 625, 250, 858, 957, 860, 353, 112, 162, 381, 738, 226, 419, 972, 656, 875, 20, 322, 902, 22, 16, 182, 981, 426, 440, 122, 249, 77, 96, 136, 597, 932, 741, 470, 696, 681, 401, 891, 922, 749, 614, 754, 770, 677, 518, 569, 822, 144, 845, 714, 420, 930, 195, 623, 439, 951, 733, 392, 453, 581, 210, 633, 771, 901, 266, 323, 45, 150, 502, 153, 438, 482, 466, 655, 471, 428, 444, 664, 355, 60, 245, 288, 295, 524, 745, 30, 362, 49, 988, 373, 463, 900, 710, 807, 903, 794, 709, 258, 978, 209, 689, 313, 237, 79, 278, 716, 767, 575, 871, 473, 52, 946, 760, 496, 587, 34, 413, 701, 825, 867, 885, 485, 534, 198, 750, 874, 66, 221, 924, 630, 164, 165, 827, 457, 474, 262, 207, 537, 958, 815, 961, 9, 84, 32, 37, 950, 134, 960, 414, 778, 916, 893, 876, 316, 244, 711, 46, 208, 688, 271, 907, 498, 228, 15, 302, 140, 824, 832, 456, 795, 236, 171, 692, 378, 593, 500, 999, 837, 909, 339, 854, 214, 81, 695, 286, 110, 753, 325, 312, 705, 776, 293, 82, 336, 590, 913, 973, 41, 578, 968, 116, 404, 652, 508, 660, 384, 985, 820, 540, 608, 984, 405, 40, 567, 3, 452, 190, 849, 954, 605, 269, 361, 634, 649, 127, 579, 685, 187, 566, 544, 762, 14, 186, 204, 739, 510, 906, 374, 562, 723, 100, 850, 492, 583, 499, 624, 158, 646, 507, 797, 619, 941, 451, 763, 690, 680, 80, 10, 528, 892, 94, 17, 645, 242, 609, 333, 458, 882, 936, 586, 974, 259, 917, 983, 725, 472, 666, 189, 240, 280, 635, 247, 254, 489, 644, 995, 23, 947, 490, 483, 175, 539, 910, 231, 536, 201, 943, 332, 359, 595, 68, 563, 878, 616, 766, 435, 812, 555, 149, 925, 647, 934, 949, 718, 552, 292, 24, 788, 543, 263, 852, 407, 713, 654, 377, 289, 358, 522, 349, 212, 476, 462, 133, 423, 311, 663, 197, 424, 88, 636, 243, 256, 748, 403, 460, 806, 178, 879, 810, 108, 85, 661, 324, 264, 261, 856, 369, 469, 481, 51, 360, 434, 383, 391, 831, 95, 354, 172, 105, 744, 57, 467, 588, 443, 119, 459, 842, 335, 318, 782, 341, 72, 840, 895, 987, 120, 591, 160, 559, 747, 385, 577, 975, 515, 310, 818, 380, 398, 816, 43, 111, 386, 683, 337, 764, 808, 26, 976, 743, 92, 106, 233, 513, 814, 276, 494, 294, 218, 370, 557, 54, 970, 329, 103, 12, 200, 863, 657, 2, 610, 698, 734, 998, 841, 101, 785, 495, 491, 406, 487, 887, 637, 520, 234, 455, 319, 257, 836, 31, 638, 632, 170, 768, 830, 570, 640, 565, 177, 682, 755, 387, 417, 996, 125, 255, 928, 124, 530, 994, 556, 235, 138, 889, 527, 746, 843, 480, 251, 545, 436, 694, 241, 993, 774, 693, 921, 141, 252, 13, 314, 735, 942, 202, 548, 756, 576, 641, 613, 411, 918, 28, 59, 90, 441, 525, 216, 676, 834, 89, 146, 267, 792, 727, 47, 343, 844, 775, 129, 829, 880, 862, 758, 521, 728, 50, 873, 585, 279, 780, 726, 115, 783, 464, 1, 561, 547, 803, 227, 290, 626, 721, 964, 945, 346, 560, 27, 503, 877, 611, 618, 737, 477, 192, 238, 720, 642, 91, 730, 592, 173, 159, 454, 104, 69, 505, 412, 651, 752, 291, 855, 772, 821, 272, 188, 493, 731, 365, 56, 299, 225, 751, 347, 305, 152, 497, 63, 926, 868, 838, 979, 659, 589, 580, 905, 658, 861, 205, 296, 356, 914, 554, 997, 848, 955, 447, 167, 965, 107, 706, 684, 990, 953, 568, 631, 757, 366, 176, 793, 823, 135, 582, 117, 42, 179, 707, 382, 673, 883, 97, 70, 309, 300, 270, 184, 121, 627, 479, 686, 143, 246, 215, 191, 430, 363, 223, 193, 274, 397, 908, 538, 427, 445, 791, 282, 448, 174, 870, 944, 39, 584, 702, 131, 303, 268, 857, 523, 719, 36, 899, 5, 402, 301, 83, 253, 74, 415, 161, 798, 11, 217, 784, 809, 977, 48, 166, 181, 813, 64, 786, 4, 769, 155, 156, 989, 283, 606, 779, 211, 811, 553, 432, 168, 206, 966, 6, 55, 866, 475, 884, 275, 596, 799, 478, 151, 986]
# 10102920.37
# x = [98, 650, 532, 962, 533, 118, 145, 969, 740, 612, 509, 622, 90, 59, 28, 918, 411, 613, 641, 576, 756, 761, 732, 213, 512, 399, 326, 334, 931, 148, 828, 948, 890, 297, 488, 224, 248, 53, 364, 872, 699, 163, 963, 607, 859, 137, 33, 315, 572, 389, 959, 573, 425, 321, 710, 900, 940, 463, 373, 988, 49, 362, 30, 745, 524, 295, 288, 245, 60, 355, 664, 444, 502, 153, 466, 655, 471, 428, 575, 767, 871, 473, 52, 482, 438, 150, 45, 323, 266, 901, 771, 633, 604, 76, 653, 320, 851, 29, 662, 222, 722, 787, 75, 418, 395, 367, 717, 898, 574, 394, 703, 519, 431, 777, 531, 461, 736, 422, 260, 194, 620, 8, 180, 429, 433, 927, 78, 287, 920, 35, 38, 338, 648, 594, 912, 185, 114, 603, 773, 409, 896, 671, 328, 232, 546, 376, 442, 393, 25, 345, 126, 700, 937, 897, 327, 835, 273, 550, 817, 449, 581, 210, 453, 392, 733, 951, 439, 623, 195, 708, 802, 759, 839, 113, 715, 930, 420, 714, 845, 144, 822, 569, 518, 677, 770, 754, 614, 749, 922, 891, 401, 681, 696, 741, 932, 597, 136, 96, 77, 981, 440, 426, 182, 122, 249, 470, 16, 22, 902, 322, 20, 875, 656, 972, 419, 226, 738, 381, 162, 625, 112, 353, 982, 904, 935, 304, 501, 853, 860, 957, 250, 858, 468, 628, 564, 514, 933, 142, 61, 421, 285, 549, 465, 408, 21, 724, 229, 93, 617, 484, 19, 672, 598, 450, 357, 847, 368, 789, 281, 938, 911, 506, 691, 615, 704, 130, 599, 992, 665, 102, 712, 939, 670, 375, 679, 805, 621, 667, 643, 535, 348, 203, 541, 58, 600, 67, 675, 298, 729, 388, 351, 71, 915, 379, 230, 801, 154, 833, 558, 437, 410, 139, 1000, 668, 602, 340, 991, 486, 342, 352, 790, 504, 971, 865, 846, 400, 344, 551, 371, 147, 220, 199, 781, 109, 219, 542, 157, 330, 669, 272, 821, 772, 855, 291, 752, 216, 525, 441, 676, 834, 146, 89, 727, 47, 343, 844, 775, 129, 829, 880, 862, 758, 521, 50, 728, 792, 267, 585, 873, 279, 780, 726, 115, 783, 464, 1, 561, 889, 387, 682, 755, 227, 803, 547, 503, 877, 611, 618, 737, 720, 642, 91, 730, 592, 173, 159, 454, 104, 69, 505, 412, 651, 305, 347, 751, 225, 188, 299, 56, 365, 731, 493, 819, 639, 308, 580, 926, 63, 497, 152, 238, 192, 477, 868, 838, 979, 659, 589, 554, 997, 848, 955, 447, 296, 356, 914, 205, 861, 658, 905, 331, 196, 390, 516, 7, 529, 446, 277, 952, 923, 894, 132, 888, 62, 396, 601, 169, 864, 87, 511, 99, 629, 929, 239, 42, 707, 382, 179, 673, 883, 97, 70, 309, 300, 270, 184, 627, 117, 582, 135, 823, 793, 44, 416, 678, 372, 128, 765, 350, 176, 366, 757, 631, 568, 953, 990, 684, 706, 107, 965, 167, 430, 191, 215, 246, 143, 479, 686, 121, 944, 39, 584, 702, 131, 303, 268, 857, 523, 719, 36, 448, 174, 870, 282, 791, 445, 427, 538, 908, 899, 5, 397, 402, 301, 83, 193, 274, 223, 363, 253, 74, 415, 161, 798, 11, 217, 784, 809, 977, 48, 166, 181, 813, 64, 786, 4, 769, 155, 156, 283, 989, 168, 432, 553, 811, 779, 606, 211, 27, 560, 346, 945, 964, 721, 626, 290, 177, 565, 640, 596, 275, 884, 475, 866, 55, 6, 966, 206, 986, 151, 478, 799, 638, 31, 632, 170, 768, 830, 570, 417, 255, 637, 487, 406, 887, 124, 928, 125, 996, 994, 556, 530, 235, 138, 746, 527, 843, 480, 993, 241, 694, 436, 251, 545, 548, 202, 774, 693, 921, 141, 252, 13, 314, 735, 942, 919, 796, 886, 306, 526, 18, 881, 65, 687, 697, 869, 265, 571, 317, 742, 967, 183, 826, 956, 307, 123, 674, 800, 73, 284, 86, 517, 980, 804, 903, 807, 794, 709, 258, 978, 209, 689, 313, 237, 79, 278, 716, 165, 164, 827, 457, 474, 262, 207, 41, 537, 958, 815, 961, 9, 84, 32, 37, 950, 134, 960, 414, 778, 916, 893, 876, 244, 316, 46, 208, 688, 271, 907, 711, 498, 15, 228, 140, 302, 171, 236, 795, 456, 832, 824, 577, 385, 747, 663, 197, 424, 88, 311, 423, 133, 403, 748, 256, 636, 243, 559, 160, 591, 119, 120, 987, 895, 72, 840, 383, 434, 391, 831, 95, 354, 105, 172, 341, 782, 318, 335, 842, 459, 443, 588, 467, 818, 380, 398, 816, 743, 43, 111, 386, 310, 515, 975, 683, 337, 764, 808, 698, 610, 734, 998, 841, 101, 785, 495, 491, 2, 106, 26, 976, 92, 233, 513, 814, 276, 494, 294, 57, 744, 218, 370, 557, 54, 970, 329, 103, 12, 200, 863, 657, 520, 234, 455, 257, 836, 319, 51, 360, 481, 469, 369, 856, 324, 661, 264, 261, 85, 108, 810, 879, 178, 460, 806, 462, 476, 212, 349, 522, 358, 289, 377, 654, 713, 407, 852, 263, 543, 788, 24, 292, 552, 718, 949, 934, 647, 925, 149, 555, 812, 201, 536, 231, 175, 539, 910, 943, 332, 359, 595, 435, 766, 616, 878, 563, 68, 483, 490, 947, 23, 995, 644, 489, 254, 247, 635, 280, 240, 189, 472, 666, 3, 725, 983, 917, 259, 974, 586, 936, 882, 458, 333, 609, 242, 645, 17, 94, 510, 892, 528, 10, 80, 680, 690, 763, 451, 941, 619, 797, 507, 646, 158, 624, 499, 583, 492, 850, 100, 723, 562, 374, 906, 739, 204, 186, 14, 762, 544, 566, 187, 685, 579, 127, 649, 634, 361, 269, 605, 954, 849, 190, 452, 867, 885, 825, 701, 34, 587, 946, 760, 496, 413, 485, 534, 198, 221, 924, 630, 66, 874, 750, 540, 608, 984, 405, 40, 567, 820, 985, 384, 660, 508, 652, 404, 116, 968, 578, 973, 913, 590, 336, 82, 293, 776, 705, 312, 325, 753, 110, 286, 695, 81, 214, 854, 339, 909, 837, 999, 500, 593, 378, 692]

print(" ".join(list(map(str, x))))