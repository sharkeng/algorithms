import math
import time
from random import randint
from tqdm import tqdm


def to_list(r):
    return list(map(int, r.split()))


def to_str(r):
    return " ".join(list(map(str, r)))


def get_coords_from_console():
    n = int(input())
    coords = dict()
    for i in range(n):
        s = input().split(' ')
        coords[int(s[0])] = [int(float(s[1])), int(float(s[2]))]
    return coords


def get_coords_from_file(filename):
    with open(filename, "r") as f:
        st = f.read().split("\n")[1:]
        return {int(s.split()[0]): list(map(float, s.split()[1:])) for s in st if s}


two_opt_swap = lambda r, i, k: r[0:i] + r[k:-len(r) + i - 1:-1] + r[k + 1:len(r)]


class ILS:
    def __init__(self, filename):
        self.coords = get_coords_from_file(filename)
        self.old_i_dist, self.old_k_dist = 0, 0

    def get_dist(self, x, r):
        return math.hypot(self.coords[r[x - 1]][0] - self.coords[r[x]][0],
                          self.coords[r[x - 1]][1] - self.coords[r[x]][1])

    def get_i_k_dists(self, i, k, route):
        try:
            new_k_dist = self.get_dist(k + 1 if k + 1 < len(route) else 0, route)
        except KeyError:
            new_k_dist = 0
        try:
            new_i_dist = self.get_dist(i, route)
        except KeyError:
            new_i_dist = 0
        return new_i_dist, new_k_dist

    def calculate_total_distance(self, route, i=None, k=None, old_dist=None):
        if i and k and old_dist:
            return old_dist - self.old_i_dist - self.old_k_dist + sum(self.get_i_k_dists(i, k, route))
        else:
            res = 0
            for p in range(len(route)):
                res += self.get_dist(p, route)
        return res

    def two_opt(self, route):
        existing_route = route
        current_dist = self.calculate_total_distance(route)
        changed = True
        while changed:
            changed = False
            for i in range(len(existing_route)):
                for k in range(i + 1, len(existing_route)):
                    self.old_i_dist, self.old_k_dist = self.get_i_k_dists(i, k, existing_route)

                    new_route = two_opt_swap(existing_route, i, k)
                    new_dist = self.calculate_total_distance(new_route, i, k, current_dist)

                    if current_dist - new_dist >= 1:
                        # print(new_dist)
                        existing_route = new_route
                        current_dist = new_dist
                        changed = True
        return existing_route, current_dist

    def four_opt(self, route):
        rand_kek = lambda: randint(0, len(route) - 1) // 4
        x = rand_kek()
        y = x + rand_kek()
        z = y + rand_kek()
        return route[:x] + route[z:] + route[y:z] + route[x:y]

    def greedy(self, node=1):
        route_best = []
        len_best = float('inf')
        # for iter_index, iter in tqdm(coords.items()):
        route = [node]
        new_city_index, new_city_coords, distance = self.make_closer(self.coords[node], route)
        len_route = distance
        route.append(new_city_index)
        while len(route) < len(self.coords):
            new_city_index, new_city_coords, distance = self.make_closer(new_city_coords, route)
            len_route += distance
            route.append(new_city_index)
        if len_route < len_best:
            len_best = len_route
            route_best = route
        return route_best, len_best

    def make_closer(self, coords_city, past_cities):
        dist_best = float('inf')
        for id, cs in self.coords.items():
            if id not in past_cities:
                distance = math.hypot(coords_city[0] - cs[0], coords_city[1] - cs[1])
                if distance < dist_best:
                    dist_best = distance
                    closer_city_id = id
                    closer_city_coords = cs
        return closer_city_id, closer_city_coords, dist_best

    def local_search(self, start_route):
        return self.two_opt(start_route)

    def integrated_local_search(self, node, count=None, wanted_distance=None, last_route=None):
        if last_route:
            route = last_route
        else:
            route, _ = self.greedy(node)
            print(_)
        route, min_distance = self.local_search(route)
        print("Distance after 2-Opt Approach:", min_distance)
        print(route, len(route))
        if count:
            for i in tqdm(range(count)):
                new_route = self.four_opt(route)
                new_route, new_distance = self.local_search(new_route)
                if new_distance < min_distance:
                    min_distance = new_distance
                    route = new_route
        elif wanted_distance:
            while min_distance > wanted_distance:
                new_route = self.four_opt(route)
                new_route, new_distance = self.local_search(new_route)
                if new_distance < min_distance:
                    print(new_route, "\n", new_distance, ">", wanted_distance)
                    min_distance = new_distance
                    route = new_route
        print("Distance after 4-Opt Approach:", min_distance)
        # print(route, len(route))
        return route, min_distance

#
# x, min_dist = ILS("datasets/mona_1000.txt").integrated_local_search(1, wanted_distance=431109.87, last_route=to_list
# print(" ".join(list(map(str, x))))
# print(f"Min dist: {min_dist}")
import matplotlib.pyplot as plt

x = [287, 145, 763, 711, 253, 108, 673, 583, 472, 963, 228, 909, 698, 999, 787, 714, 904, 303, 170, 72, 610, 784, 595, 288, 1000, 389, 32, 214, 821, 314, 854, 791, 498, 655, 281, 268, 640, 160, 782, 82, 52, 192, 3, 8, 508, 621, 421, 573, 479, 894, 579, 38, 748, 927, 483, 670, 372, 492, 667, 625, 578, 491, 811, 959, 291, 970, 530, 74, 798, 276, 404, 240, 489, 758, 212, 946, 817, 617, 106, 234, 807, 810, 938, 357, 505, 668, 201, 61, 977, 49, 311, 180, 910, 766, 139, 930, 725, 133, 891, 289, 444, 153, 428, 540, 571, 899, 627, 401, 222, 200, 785, 495, 742, 377, 165, 277, 689, 601, 232, 4, 204, 35, 802, 116, 528, 823, 757, 486, 29, 59, 503, 840, 249, 83, 259, 60, 954, 955, 138, 759, 47, 780, 158, 603, 593, 644, 747, 36, 575, 572, 166, 248, 67, 323, 873, 71, 691, 257, 237, 99, 51, 363, 979, 250, 978, 284, 681, 836, 195, 888, 335, 543, 141, 519, 271, 92, 788, 196, 549, 359, 890, 876, 637, 846, 866, 639, 278, 246, 267, 393, 392, 441, 213, 976, 552, 446, 847, 643, 406, 620, 706, 220, 538, 485, 198, 565, 181, 347, 671, 934, 39, 239, 184, 356, 282, 630, 808, 298, 921, 361, 835, 592, 679, 346, 349, 221, 332, 252, 493, 174, 216, 316, 529, 558, 384, 448, 318, 926, 294, 205, 306, 605, 432, 11, 649, 367, 352, 596, 238, 953, 806, 561, 828, 299, 629, 518, 125, 417, 217, 546, 884, 606, 531, 6, 344, 936, 851, 488, 53, 751, 615, 542, 753, 173, 932, 368, 569, 849, 262, 156, 365, 532, 481, 587, 870, 586, 501, 981, 803, 300, 818, 833, 779, 897, 478, 633, 207, 850, 845, 94, 859, 296, 958, 30, 440, 12, 685, 93, 351, 856, 1, 832, 423, 862, 373, 334, 874, 424, 63, 576, 533, 150, 206, 908, 225, 657, 952, 588, 827, 24, 755, 113, 391, 397, 752, 652, 563, 20, 73, 973, 140, 861, 171, 541, 705, 123, 966, 78, 98, 301, 965, 945, 388, 969, 307, 385, 723, 163, 104, 203, 26, 97, 122, 336, 624, 161, 54, 398, 985, 537, 468, 968, 912, 264, 378, 224, 135, 396, 466, 892, 800, 146, 409, 975, 50, 129, 991, 18, 745, 905, 777, 860, 333, 48, 500, 431, 732, 413, 536, 925, 771, 815, 362, 917, 937, 215, 77, 86, 924, 559, 134, 898, 286, 794, 354, 918, 127, 147, 913, 425, 638, 520, 820, 447, 328, 983, 64, 376, 721, 837, 175, 130, 674, 776, 783, 194, 951, 582, 167, 647, 716, 57, 935, 504, 191, 438, 728, 722, 923, 509, 142, 45, 988, 986, 993, 494, 79, 626, 886, 380, 727, 707, 471, 608, 272, 144, 136, 497, 535, 209, 545, 46, 16, 490, 371, 69, 636, 387, 331, 941, 551, 496, 40, 484, 645, 754, 422, 473, 949, 964, 2, 600, 475, 843, 584, 839, 718, 665, 463, 383, 343, 801, 465, 659, 875, 480, 403, 962, 10, 980, 15, 562, 855, 23, 178, 22, 701, 982, 186, 852, 227, 408, 799, 877, 869, 461, 9, 297, 482, 878, 324, 21, 65, 998, 743, 402, 762, 713, 642, 539, 931, 556, 124, 715, 265, 107, 590, 295, 554, 455, 474, 900, 511, 690, 634, 703, 764, 761, 628, 826, 469, 646, 775, 611, 704, 724, 464, 911, 274, 740, 824, 502, 534, 370, 948, 456, 420, 34, 943, 148, 255, 319, 177, 110, 653, 411, 987, 599, 382, 414, 666, 765, 972, 658, 269, 280, 390, 613, 230, 675, 197, 223, 853, 789, 457, 887, 506, 971, 735, 635, 154, 312, 895, 70, 997, 568, 805, 435, 920, 202, 17, 459, 14, 512, 25, 68, 339, 309, 62, 664, 907, 95, 906, 80, 956, 419, 399, 13, 717, 612, 84, 514, 604, 901, 412, 660, 19, 76, 548, 467, 7, 942, 792, 738, 648, 179, 521, 734, 867, 922, 598, 842, 445, 879, 430, 555, 702, 75, 614, 55, 109, 872, 676, 683, 458, 760, 381, 243, 105, 155, 157, 452, 322, 187, 834, 149, 882, 101, 499, 567, 915, 260, 279, 308, 162, 822, 974, 292, 929, 41, 669, 697, 176, 967, 632, 114, 400, 865, 513, 338, 304, 933, 772, 242, 348, 369, 418, 730, 37, 726, 358, 767, 825, 131, 379, 375, 270, 226, 437, 121, 720, 650, 694, 342, 903, 433, 950, 321, 159, 185, 858, 616, 889, 731, 524, 544, 254, 594, 405, 663, 750, 957, 696, 768, 453, 830, 990, 340, 863, 774, 522, 880, 218, 564, 939, 126, 172, 263, 607, 609, 996, 682, 66, 103, 570, 585, 960, 89, 119, 686, 462, 709, 27, 275, 871, 231, 868, 87, 151, 120, 283, 427, 128, 712, 487, 256, 881, 426, 793, 893, 708, 819, 896, 219, 302, 688, 589, 415, 56, 31, 313, 597, 790, 247, 677, 581, 100, 208, 557, 233, 112, 58, 325, 193, 838, 804, 844, 115, 746, 374, 517, 781, 622, 944, 961, 183, 407, 729, 883, 43, 947, 700, 258, 994, 796, 190, 111, 199, 81, 631, 813, 719, 661, 320, 117, 245, 442, 326, 353, 364, 864, 678, 434, 885, 684, 189, 574, 88, 470, 5, 769, 476, 143, 229, 710, 526, 550, 410, 829, 273, 654, 816, 477, 916, 770, 91, 848, 310, 580, 236, 773, 330, 940, 290, 266, 680, 137, 737, 733, 695, 602, 152, 516, 169, 188, 857, 566, 693, 210, 744, 168, 436, 460, 736, 814, 619, 809, 305, 510, 450, 394, 44, 211, 507, 429, 33, 841, 329, 454, 360, 553, 902, 244, 786, 395, 235, 345, 515, 317, 641, 699, 984, 416, 350, 672, 315, 831, 591, 778, 618, 102, 85, 182, 741, 439, 547, 90, 651, 118, 523, 241, 285, 795, 366, 797, 132, 28, 662, 928, 327, 443, 164, 989, 687, 919, 449, 749, 96, 293, 341, 525, 812, 623, 337, 756, 577, 992, 656, 386, 560, 692, 527, 451, 355, 914, 995, 739, 261, 251, 42]
ils = ILS("datasets/mona_1000.txt")
xes = []
yes = []
for i in x:
    xes.append(ils.coords[i][0])
    yes.append(ils.coords[i][1])

plt.plot(xes, yes, 'bo')
plt.show()
# x = [418, 417, 178, 191, 926, 919, 653, 637, 187, 411, 377, 419, 900, 30, 70, 631, 634, 650, 924, 731, 730, 927, 278, 921, 925, 254, 880, 878, 879, 684, 111, 2, 1, 153, 155, 291, 374, 508, 549, 279, 896, 255, 538, 627, 511, 601, 744, 132, 108, 861, 862, 929, 726, 498, 358, 632, 23, 18, 932, 801, 449, 340, 447, 428, 794, 95, 863, 139, 140, 930, 399, 183, 209, 212, 928, 708, 27, 104, 223, 868, 922, 656, 477, 267, 615, 228, 395, 311, 313, 707, 668, 673, 144, 162, 161, 88, 450, 785, 923, 467, 711, 710, 939, 783, 858, 390, 240, 521, 370, 540, 607, 45, 541, 92, 749, 341, 743, 629, 906, 912, 312, 691, 742, 651, 698, 37, 62, 181, 182, 184, 82, 675, 306, 248, 347, 131, 247, 129, 75, 945, 299, 285, 262, 214, 213, 485, 487, 118, 943, 292, 290, 11, 156, 848, 847, 846, 652, 505, 509, 944, 565, 566, 644, 628, 466, 941, 911, 514, 654, 180, 748, 426, 849, 841, 876, 875, 433, 39, 600, 817, 41, 602, 543, 217, 293, 444, 723, 702, 17, 40, 54, 294, 233, 554, 760, 400, 382, 381, 501, 771, 931, 333, 175, 113, 117, 416, 394, 304, 883, 873, 60, 519, 525, 527, 823, 520, 388, 387, 303, 305, 99, 476, 308, 392, 121, 142, 806, 366, 578, 218, 219, 134, 355, 908, 503, 211, 210, 332, 310, 176, 864, 866, 316, 235, 227, 226, 662, 746, 423, 635, 251, 275, 145, 569, 845, 769, 34, 869, 754, 408, 164, 166, 404, 636, 938, 843, 626, 936, 559, 563, 564, 792, 935, 439, 437, 778, 599, 804, 805, 824, 827, 68, 322, 321, 320, 326, 325, 892, 534, 277, 253, 257, 536, 280, 296, 630, 35, 809, 779, 902, 904, 150, 448, 725, 732, 738, 350, 589, 137, 274, 492, 504, 533, 250, 750, 429, 497, 491, 736, 330, 328, 353, 575, 391, 323, 782, 57, 661, 660, 26, 676, 679, 471, 955, 733, 961, 445, 800, 415, 25, 489, 490, 611, 980, 61, 979, 609, 90, 978, 86, 891, 643, 597, 763, 762, 761, 120, 793, 647, 614, 378, 105, 265, 130, 5, 952, 256, 909, 133, 624, 766, 324, 28, 633, 682, 657, 412, 342, 685, 42, 43, 103, 454, 315, 686, 872, 884, 888, 64, 545, 53, 52, 152, 765, 63, 302, 951, 795, 797, 755, 756, 436, 751, 149, 949, 360, 7, 886, 3, 789, 790, 791, 518, 515, 914, 913, 193, 666, 664, 882, 572, 836, 198, 531, 948, 852, 590, 307, 432, 915, 128, 29, 361, 837, 700, 472, 810, 683, 581, 461, 373, 188, 167, 171, 339, 855, 642, 455, 577, 774, 942, 147, 146, 807, 677, 680, 905, 179, 177, 9, 12, 208, 638, 695, 693, 780, 148, 200, 13, 126, 125, 36, 887, 940, 441, 199, 107, 570, 402, 704, 688, 473, 4, 768, 715, 281, 259, 920, 379, 380, 562, 646, 606, 605, 561, 222, 221, 51, 839, 548, 856, 871, 867, 786, 618, 245, 367, 899, 446, 946, 246, 796, 814, 815, 463, 464, 877, 517, 406, 357, 87, 301, 327, 56, 947, 10, 8, 309, 317, 816, 594, 596, 595, 512, 165, 101, 735, 776, 808, 592, 593, 314, 375, 242, 709, 950, 598, 953, 409, 46, 874, 553, 728, 727, 854, 201, 507, 371, 977, 558, 857, 462, 284, 389, 351, 859, 770, 767, 658, 69, 842, 840, 97, 96, 216, 298, 44, 48, 65, 66, 73, 258, 185, 488, 230, 655, 901, 965, 295, 719, 967, 718, 717, 186, 356, 354, 821, 435, 434, 623, 622, 560, 475, 850, 502, 798, 481, 38, 410, 528, 459, 396, 407, 881, 32, 33, 974, 649, 975, 610, 479, 136, 480, 478, 591, 587, 586, 22, 714, 713, 712, 539, 261, 897, 283, 838, 349, 79, 74, 241, 604, 764, 154, 496, 844, 803, 903, 160, 196, 401, 971, 740, 970, 724, 721, 720, 384, 98, 689, 690, 705, 706, 741, 973, 47, 551, 976, 506, 287, 972, 829, 830, 969, 828, 31, 16, 14, 544, 526, 747, 81, 78, 968, 898, 80, 918, 249, 143, 273, 138, 141, 555, 556, 737, 802, 119, 438, 442, 50, 663, 72, 197, 758, 757, 440, 966, 345, 343, 300, 832, 833, 834, 115, 716, 229, 687, 21, 20, 405, 403, 917, 451, 194, 831, 835, 231, 232, 234, 91, 530, 331, 329, 739, 513, 516, 550, 671, 288, 960, 529, 612, 579, 580, 584, 745, 270, 334, 335, 336, 338, 665, 678, 681, 49, 24, 19, 272, 268, 787, 964, 15, 163, 784, 674, 672, 667, 452, 552, 383, 820, 818, 470, 397, 781, 811, 959, 546, 524, 522, 286, 895, 348, 422, 568, 567, 799, 195, 67, 670, 613, 359, 58, 266, 297, 484, 486, 608, 337, 106, 376, 585, 122, 123, 215, 430, 385, 386, 641, 788, 956, 907, 318, 319, 639, 851, 813, 890, 958, 616, 894, 825, 826, 889, 346, 344, 962, 263, 865, 83, 207, 224, 822, 963, 722, 109, 110, 483, 669, 523, 469, 468, 89, 55, 59, 648, 645, 542, 84, 85, 94, 93, 172, 173, 352, 640, 957, 853, 819, 621, 620, 619, 617, 6, 954, 174, 535, 239, 500, 499, 236, 169, 170, 413, 937, 362, 363, 414, 260, 537, 752, 282, 753, 893, 372, 699, 870, 910, 206, 205, 204, 458, 696, 697, 243, 276, 203, 369, 190, 225, 495, 494, 493, 365, 777, 220, 860, 202, 465, 557, 151, 71, 659, 192, 127, 453, 775, 703, 124, 269, 694, 692, 482, 474, 885, 398, 252, 729, 734, 625, 603, 159, 157, 701, 289, 934, 425, 424, 364, 271, 933, 100, 510, 532, 135, 112, 114, 116, 368, 916, 571, 158, 76, 77, 812, 168, 189, 264, 244, 456, 772, 457, 773, 576, 582, 583, 588, 427, 431, 547, 102, 443, 460, 574, 573, 420, 421, 759, 393, 237, 238]
# print(to_str(x))

# # print(" ".join(list(map(str, x))))
#
# from multiprocessing.dummy import Pool

# Make the Pool of workers
# from os import walk
#
# _, _, filenames = next(walk("datasets"))
#
#
# # x = {}
# # for file in filenames:
# #     x.update({file.split(".")[0]: ILS(f"datasets/{file}").integrated_local_search})
# #
# pool = Pool(8)
#
# # Open the URLs in their own threads
# # and return the results
# args = []
# for i in range(1, 1001):
#     args.append(i)
#
# results = pool.map(ILS("datasets/mona_1000.txt").integrated_local_search, args)
#
# print(results)
# with open("results/res.txt", "w") as f:
#     f.write("\n".join([to_str(x[0]) + f"\nDIST: {x[1]}" for x in results]))
#
# # Close the pool and wait for the work to finish
# pool.close()
# pool.join()

# x
# # Min dist: 183086.7365476046
# z = list(map(int, x.split()))
#
# print(ILS("datasets/mona_1000.txt").calculate_total_distance(z))

# import requests
# # x
# x
# r = requests.post("https://176.57.208.231/",
#                   data={"team_name": "sharkeng", "problem_name": "Mona Lisa", "solution": x, "submit": "GO"}, verify=False)
#
# print(r.text)
